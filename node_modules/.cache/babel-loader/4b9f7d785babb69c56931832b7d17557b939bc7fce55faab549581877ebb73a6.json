{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GNS\\\\Desktop\\\\gmail-clone\\\\src\\\\component\\\\EmailList\\\\EmailList.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect } from \"react\";\nimport \"./EmailList.css\";\nimport EmailSetting from \"../EmailSetting/EmailSetting\";\nimport EmailType from \"../EmailType/EmailType\";\nimport EmailBody from \"../EmailBody/EmailBody\";\nimport { inboxmailSliceActions } from \"./store/inboxmail\";\nimport { useDispatch, useSelector } from \"react-redux\";\n//import { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmailList() {\n  _s();\n  const inboxmail = useSelector(state => state.inboxmail.inboxmail);\n  console.log(inboxmail);\n  useEffect(() => {\n    let setint = setInterval(() => {\n      const fetchData = async () => {\n        try {\n          const response = await fetch(\"https://mail-box-43bb3-default-rtdb.firebaseio.com/mail.json\");\n          const data = await response.json();\n          let newArray = [];\n          for (let key in data) {\n            newArray.push({\n              id: key,\n              name: data[key].email,\n              subject: data[key].subject,\n              description: data[key].description,\n              time: data[key].time,\n              localtime: data[key].localtime,\n              read: data[key].read,\n              quantity: data[key].quantity\n            });\n          }\n          dispatch(inboxmailSliceActions.addmail(newArray));\n        } catch (err) {\n          console.log(err.message);\n        }\n      };\n      // if(initial){\n      //   initial=false;\n      //   return;\n      // }\n      fetchData();\n    }, 2000);\n    return () => setInterval(setint);\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emaillist\",\n    children: [/*#__PURE__*/_jsxDEV(EmailSetting, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmailType, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), inboxmail.map(item => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(EmailBody, {\n        id: item.id,\n        name: item.name,\n        subject: item.subject,\n        description: item.description,\n        read: item.read,\n        time: new Date(item.time).toLocaleTimeString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(EmailList, \"9xkHL8Matf2BeGZmMsL4QBtTZ8Q=\", false, function () {\n  return [useSelector];\n});\n_c = EmailList;\nexport default EmailList;\nvar _c;\n$RefreshReg$(_c, \"EmailList\");","map":{"version":3,"names":["React","Fragment","useEffect","EmailSetting","EmailType","EmailBody","inboxmailSliceActions","useDispatch","useSelector","jsxDEV","_jsxDEV","EmailList","_s","inboxmail","state","console","log","setint","setInterval","fetchData","response","fetch","data","json","newArray","key","push","id","name","email","subject","description","time","localtime","read","quantity","dispatch","addmail","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","Date","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Users/GNS/Desktop/gmail-clone/src/component/EmailList/EmailList.js"],"sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport \"./EmailList.css\";\r\nimport EmailSetting from \"../EmailSetting/EmailSetting\";\r\nimport EmailType from \"../EmailType/EmailType\";\r\nimport EmailBody from \"../EmailBody/EmailBody\";\r\nimport { inboxmailSliceActions } from \"./store/inboxmail\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n//import { Link } from \"react-router-dom\";\r\n\r\nfunction EmailList() {\r\n  \r\n  const inboxmail = useSelector((state) => state.inboxmail.inboxmail);\r\n  console.log(inboxmail);\r\n  useEffect(() => {\r\n    let setint = setInterval(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://mail-box-43bb3-default-rtdb.firebaseio.com/mail.json\"\r\n        );\r\n        const data = await response.json();\r\n        let newArray = [];\r\n        for (let key in data) {\r\n          newArray.push({\r\n            id: key,\r\n            name: data[key].email,\r\n            subject: data[key].subject,\r\n            description: data[key].description,\r\n            time: data[key].time,\r\n            localtime: data[key].localtime,\r\n            read:data[key].read,\r\n            quantity: data[key].quantity,\r\n          });\r\n        }\r\n        dispatch(inboxmailSliceActions.addmail(newArray));\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    }\r\n    // if(initial){\r\n    //   initial=false;\r\n    //   return;\r\n    // }\r\n    fetchData();\r\n    }, 2000);\r\n    return () => setInterval(setint);\r\n  }, [dispatch]);\r\n \r\n  return (\r\n    <div className=\"emaillist\">\r\n      <EmailSetting />\r\n      <EmailType />\r\n      {inboxmail.map((item) => (\r\n        <Fragment key={item.id}>\r\n          <EmailBody\r\n            id={item.id}\r\n            name={item.name}\r\n            subject={item.subject}\r\n            description={item.description}\r\n            read={item.read}\r\n            time={new Date(item.time).toLocaleTimeString()}\r\n          />\r\n        </Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmailList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}