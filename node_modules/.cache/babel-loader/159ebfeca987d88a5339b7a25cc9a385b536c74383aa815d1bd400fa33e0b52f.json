{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialInboxmailState = {\n  inboxmail: [],\n  emaildetail: \"\",\n  totalmail: 0\n};\nconst inboxmailSlice = createSlice({\n  name: \"inboxmail\",\n  initialState: initialInboxmailState,\n  reducers: {\n    addmail(state, action) {\n      state.inboxmail = action.payload.sort(({\n        localtime: a\n      }, {\n        localtime: b\n      }) => b > a ? 1 : b < a ? -1 : 0);\n      state.totalmail = action.payload.reduce((curr, prev) => {\n        return curr + prev.quantity;\n      }, 0);\n    },\n    emailDetail(state, action) {\n      let obj = action.payload;\n      let newobj = state.inboxmail.find(item => item.id === obj.id);\n      if (newobj) {\n        newobj.read = !newobj.read;\n      }\n      state.emaildetail = newobj;\n    }\n  }\n});\nexport const inboxmailSliceActions = inboxmailSlice.actions;\nexport default inboxmailSlice.reducer;","map":{"version":3,"names":["createSlice","initialInboxmailState","inboxmail","emaildetail","totalmail","inboxmailSlice","name","initialState","reducers","addmail","state","action","payload","sort","localtime","a","b","reduce","curr","prev","quantity","emailDetail","obj","newobj","find","item","id","read","inboxmailSliceActions","actions","reducer"],"sources":["C:/Users/GNS/Desktop/gmail-clone/src/store/inboxmail.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialInboxmailState = {\r\n  inboxmail: [],\r\n  emaildetail: \"\",\r\n  totalmail: 0,\r\n};\r\n\r\nconst inboxmailSlice = createSlice({\r\n  name: \"inboxmail\",\r\n  initialState: initialInboxmailState,\r\n  reducers: {\r\n    addmail(state, action) {\r\n      state.inboxmail = action.payload.sort(\r\n        ({ localtime: a }, { localtime: b }) => (b > a ? 1 : b < a ? -1 : 0)\r\n      );\r\n      state.totalmail = action.payload.reduce((curr,prev) => {\r\n      return curr + prev.quantity\r\n    },0)\r\n    },\r\n    emailDetail(state, action) {\r\n      let obj = action.payload;\r\n      let newobj = state.inboxmail.find((item) => item.id === obj.id);\r\n        if(newobj){\r\n          newobj.read = !newobj.read;\r\n        }\r\n      state.emaildetail = newobj;\r\n    },\r\n  },\r\n});\r\n\r\nexport const inboxmailSliceActions = inboxmailSlice.actions;\r\nexport default inboxmailSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,qBAAqB,GAAG;EAC5BC,SAAS,EAAE,EAAE;EACbC,WAAW,EAAE,EAAE;EACfC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,cAAc,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAEN,qBAAqB;EACnCO,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrBD,KAAK,CAACR,SAAS,GAAGS,MAAM,CAACC,OAAO,CAACC,IAAI,CACnC,CAAC;QAAEC,SAAS,EAAEC;MAAE,CAAC,EAAE;QAAED,SAAS,EAAEE;MAAE,CAAC,KAAMA,CAAC,GAAGD,CAAC,GAAG,CAAC,GAAGC,CAAC,GAAGD,CAAC,GAAG,CAAC,CAAC,GAAG,CACpE,CAAC;MACDL,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO,CAACK,MAAM,CAAC,CAACC,IAAI,EAACC,IAAI,KAAK;QACvD,OAAOD,IAAI,GAAGC,IAAI,CAACC,QAAQ;MAC7B,CAAC,EAAC,CAAC,CAAC;IACJ,CAAC;IACDC,WAAWA,CAACX,KAAK,EAAEC,MAAM,EAAE;MACzB,IAAIW,GAAG,GAAGX,MAAM,CAACC,OAAO;MACxB,IAAIW,MAAM,GAAGb,KAAK,CAACR,SAAS,CAACsB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,GAAG,CAACI,EAAE,CAAC;MAC7D,IAAGH,MAAM,EAAC;QACRA,MAAM,CAACI,IAAI,GAAG,CAACJ,MAAM,CAACI,IAAI;MAC5B;MACFjB,KAAK,CAACP,WAAW,GAAGoB,MAAM;IAC5B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMK,qBAAqB,GAAGvB,cAAc,CAACwB,OAAO;AAC3D,eAAexB,cAAc,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}